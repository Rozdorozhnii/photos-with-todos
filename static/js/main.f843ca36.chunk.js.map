{"version":3,"sources":["store/reducers/TodosSlice.ts","components/MainNavigation/MainNavigation.tsx","components/RootPage/RootPage.tsx","hooks/hooks.ts","store/reducers/ActionCreators.ts","components/Loader/Loader.tsx","components/PhotosPage/PhotosPage.tsx","components/TodosPage/TodosPage.tsx","components/Todo/Todo.tsx","components/PageNotFound/PageNotFound.tsx","App.tsx","store/reducers/PhotosSlice.ts","store/index.ts","index.tsx"],"names":["SortBy","MainNavigation","Navbar","bg","variant","Container","Brand","as","Link","to","Nav","className","RootPage","useAppDispatch","useDispatch","useAppSelector","useSelector","fetchPhotos","createAsyncThunk","photosId","thunkAPI","a","url","axios","get","response","data","rejectWithValue","Loader","PhotosPage","message","useState","selectedValue","setSelectedValue","state","photos","arePhotosLoading","errorLoadingPhotos","dispatch","fetchingAlbumId","length","albumId","Form","Label","htmlFor","InputGroup","style","width","FormControl","aria-label","value","toString","type","step","min","max","onChange","e","Number","target","Button","onClick","disabled","map","photo","Card","gap","Img","alt","title","src","thumbnailUrl","Body","Title","split","slice","join","Text","id","initialState","todos","description","status","filteredStatus","all","todosSlice","createSlice","name","reducers","toggleStatusTodo","action","toogledTodo","find","todo","payload","filter","push","addTodo","removeTodo","setStatusFilter","TodosPage","newTodoValue","setNewTodoValue","actions","visibleTodos","sort","b","String","marginBottom","Select","marginTop","event","done","onSubmit","preventDefault","newTodoId","Math","method","Group","Control","placeholder","checked","cn","Todo","params","useParams","goalTodo","todoid","PageNotFound","App","path","element","photosSlice","extraReducers","rejected","pending","fulfilled","rootReducer","combineReducers","todosReducer","photosReducer","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.f843ca36.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\n\n// eslint-disable-next-line no-shadow\nexport enum SortBy {\n  all = 'all',\n  done = 'true',\n  todo = 'false'\n}\n\nexport interface TodosState {\n  todos: Todo[];\n  filteredStatus: SortBy;\n}\n\nconst initialState: TodosState = {\n  todos: [{\n    id: 1,\n    description: 'Lorem Ipsum',\n    status: false,\n  }],\n  filteredStatus: SortBy.all,\n};\n\nexport const todosSlice: Slice<TodosState> = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    toggleStatusTodo(state, action: PayloadAction<number>) {\n      const toogledTodo = state.todos.find(todo => todo.id === action.payload);\n\n      if (toogledTodo) {\n        toogledTodo.status = !toogledTodo.status;\n      }\n\n      state.todos = state.todos.filter(todo => todo.id !== action.payload);\n      if (toogledTodo) {\n        state.todos.push(toogledTodo);\n      }\n    },\n    addTodo(state, action: PayloadAction<Todo>) {\n      state.todos.push(action.payload);\n    },\n    removeTodo(state, action: PayloadAction<number>) {\n      state.todos = state.todos.filter(todo => todo.id !== action.payload);\n    },\n    setStatusFilter(state, action: PayloadAction<SortBy>) {\n      state.filteredStatus = action.payload;\n    },\n  },\n});\n\nexport default todosSlice.reducer;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport { Link } from 'react-router-dom';\nimport './MainNavigation.scss';\n\nexport const MainNavigation: React.FC = () => {\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand\n          as={Link}\n          to=\"/\"\n        >\n          Home\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          <Nav.Link as={Link} to=\"/photos\">\n            Photos\n          </Nav.Link>\n\n          <Nav.Link as={Link} to=\"/todos\">\n            Todos\n          </Nav.Link>\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n};\n","import React from 'react';\nimport './RootPage.scss';\n\nexport const RootPage: React.FC = () => {\n  return (\n    <div className=\"root\">\n      <h1>Home Page of Photos and Todos</h1>\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchPhotos = createAsyncThunk(\n  'photos/fetch',\n  async (photosId: number, thunkAPI) => {\n    try {\n      const url = `https://jsonplaceholder.typicode.com/photos?albumId=${photosId}`;\n\n      const response = await axios.get<Photo[]>(url);\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(`Some problem with fetching photos with ${error}`);\n    }\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport FormControl from 'react-bootstrap/esm/FormControl';\nimport InputGroup from 'react-bootstrap/esm/InputGroup';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { fetchPhotos } from '../../store/reducers/ActionCreators';\nimport { Loader } from '../Loader';\nimport './PhotosPage.scss';\n\nexport const PhotosPage: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState<number>(0);\n  const {\n    photos,\n    arePhotosLoading,\n    errorLoadingPhotos,\n  } = useAppSelector(state => state.photos);\n  const dispatch = useAppDispatch();\n\n  let fetchingAlbumId = 0;\n\n  if (photos.length > 0) {\n    fetchingAlbumId = photos[0].albumId;\n  }\n\n  let message;\n\n  if (arePhotosLoading) {\n    message = <Loader />;\n  }\n\n  if (errorLoadingPhotos) {\n    message = <h2>{errorLoadingPhotos}</h2>;\n  }\n\n  return (\n    <div className=\"photo\">\n      <div className=\"photo__top\">\n        <h2>Page with Photos</h2>\n        <Form.Label htmlFor=\"number\">\n          <span>\n            Choose id of album here from 1 to 100\n          </span>\n          <InputGroup style={{ width: '300px' }}>\n            <FormControl\n              aria-label=\"Recipient's username\"\n              // aria-describedby=\"basic-addon2\"\n              value={selectedValue?.toString()}\n              type=\"number\"\n              step=\"1\"\n              min=\"1\"\n              max=\"100\"\n              onChange={(e) => setSelectedValue(Number(e.target.value))}\n            />\n            <Button\n              variant=\"secondary\"\n              // id=\"button-addon2\"\n              onClick={() => dispatch(fetchPhotos(Number(selectedValue)))}\n              disabled={selectedValue === fetchingAlbumId}\n            >\n              Get photos\n            </Button>\n          </InputGroup>\n        </Form.Label>\n      </div>\n      <div className=\"photo__container\">\n        {message || (\n          <>\n            {photos.map(photo => (\n              <Card key={photo.id} style={{ width: '200px', gap: '10px' }}>\n                <Card.Img\n                  variant=\"top\"\n                  alt={photo.title}\n                  src={photo.thumbnailUrl}\n                />\n                <Card.Body>\n                  <Card.Title>{photo.title.split(' ').slice(0, 2).join(' ')}</Card.Title>\n                  <Card.Text>\n                    {photo.title}\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/esm/Form';\nimport Button from 'react-bootstrap/esm/Button';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { todosSlice, SortBy } from '../../store/reducers/TodosSlice';\nimport './TodosPage.scss';\n\nexport const TodosPage: React.FC = () => {\n  const [newTodoValue, setNewTodoValue] = useState('');\n  const { todos, filteredStatus } = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const {\n    toggleStatusTodo,\n    addTodo,\n    removeTodo,\n    setStatusFilter,\n  } = todosSlice.actions;\n\n  const onSubmitNewTodo = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newTodoId: number = Math.max(...todos.map(todo => todo.id)) + 1;\n\n    const newTodo: Todo = {\n      id: newTodoId,\n      description: newTodoValue,\n      status: false,\n    };\n\n    if (newTodoValue) {\n      dispatch(addTodo(newTodo));\n    }\n\n    setNewTodoValue('');\n  };\n\n  let visibleTodos = [...todos].sort((a, b) => Number(a.status) - Number(b.status));\n\n  if (filteredStatus !== 'all') {\n    visibleTodos = todos.filter(todo => String(todo.status) === filteredStatus);\n  }\n\n  return (\n    <div className=\"todoPage\">\n      <div className=\"todoPage__top\">\n        <h2>Page with Todos</h2>\n        <Form.Label htmlFor=\"select-completed\" style={{ width: '350px', marginBottom: '16px' }}>\n          Toggle completion status below\n          <Form.Select\n            style={{ marginTop: '8px' }}\n            id=\"select-completed\"\n            value={filteredStatus}\n            onChange={(event) => dispatch(setStatusFilter(event.target.value))}\n          >\n            <option value={SortBy.all}>All</option>\n            <option value={SortBy.done}>Done</option>\n            <option value={SortBy.todo}>Todo</option>\n          </Form.Select>\n        </Form.Label>\n        <Form\n          style={{ width: '350px' }}\n          onSubmit={onSubmitNewTodo}\n          method=\"post\"\n        >\n          <Form.Group className=\"mb-3\">\n            <Form.Label htmlFor=\"new-todo-input\">Add new todo below</Form.Label>\n            <Form.Control\n              id=\"new-todo-input\"\n              placeholder=\"Enter here\"\n              value={newTodoValue}\n              onChange={(e) => setNewTodoValue(e.target.value)}\n            />\n          </Form.Group>\n          <Button variant=\"secondary\" type=\"submit\">\n            Add todo\n          </Button>\n        </Form>\n      </div>\n      <div className=\"todoPage__content\">\n        <ul className=\"todoPage__list\">\n          {visibleTodos.map(todo => (\n            <li key={todo.id} className=\"todoPage__list-item\">\n              <div>\n                <input\n                  checked={todo.status}\n                  type=\"checkbox\"\n                  onChange={() => dispatch(toggleStatusTodo(todo.id))}\n                />\n                <Link\n                  className={cn('todoPage__link', { 'todoPage__link--checked': todo.status })}\n                  to={`/todos/${todo.id}`}\n                >\n                  {todo.description}\n                </Link>\n              </div>\n              <Button\n                variant=\"danger\"\n                onClick={() => dispatch(removeTodo(todo.id))}\n                type=\"button\"\n              >\n                Remove\n              </Button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAppSelector } from '../../hooks/hooks';\nimport './Todo.scss';\n\nexport const Todo: React.FC = () => {\n  const params = useParams();\n  const { todos } = useAppSelector(state => state.todos);\n  const goalTodo = todos.find(todo => todo.id === Number(params.todoid));\n\n  return (\n    <div className=\"single-todo\">\n      <h2>Single Todo Page</h2>\n      {`with id #${params.todoid}`}\n      <br />\n      <strong>Description of todo: </strong>\n      {goalTodo?.description}\n    </div>\n  );\n};\n","import React from 'react';\nimport './PageNotFound.scss';\n\nexport const PageNotFound: React.FC = () => {\n  return (\n    <div>\n      Page Not Found\n    </div>\n  );\n};\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { MainNavigation } from './components/MainNavigation';\nimport { RootPage } from './components/RootPage';\nimport { PhotosPage } from './components/PhotosPage';\nimport { TodosPage } from './components/TodosPage';\nimport { Todo } from './components/Todo';\nimport { PageNotFound } from './components/PageNotFound';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <MainNavigation />\n\n      <section className=\"main\">\n        <Routes>\n          <Route path=\"/\" element={<RootPage />} />\n          <Route path=\"photos\" element={<PhotosPage />} />\n          <Route path=\"todos\" element={<TodosPage />} />\n          <Route path=\"todos/:todoid\" element={<Todo />} />\n          <Route path=\"*\" element={<PageNotFound />} />\n        </Routes>\n      </section>\n    </>\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\nimport { fetchPhotos } from './ActionCreators';\n\nexport interface PhotosState {\n  photos: Photo[];\n  arePhotosLoading: boolean;\n  errorLoadingPhotos: string;\n}\n\nconst initialState: PhotosState = {\n  photos: [],\n  arePhotosLoading: false,\n  errorLoadingPhotos: '',\n};\n\nexport const photosSlice: Slice<PhotosState> = createSlice({\n  name: 'photos',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchPhotos.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.arePhotosLoading = false;\n      state.errorLoadingPhotos = action.payload;\n    },\n    [fetchPhotos.pending.type]: (state) => {\n      state.arePhotosLoading = true;\n    },\n    [fetchPhotos.fulfilled.type]: (state, action: PayloadAction<Photo[]>) => {\n      state.arePhotosLoading = false;\n      state.errorLoadingPhotos = '';\n      state.photos = action.payload;\n    },\n  },\n});\n\nexport default photosSlice.reducer;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport todosReducer from './reducers/TodosSlice';\nimport photosReducer from './reducers/PhotosSlice';\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  photos: photosReducer,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['todos'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst setupStore = () => {\n  return configureStore({\n    reducer: persistedReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n  });\n};\n\nexport const store = setupStore();\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore['dispatch'];\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { App } from './App';\nimport { store, persistor } from './store';\nimport { Loader } from './components/Loader';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loader />} persistor={persistor}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}