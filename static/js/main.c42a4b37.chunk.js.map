{"version":3,"sources":["store/reducers/TodosSlice.ts","components/MainNavigation/MainNavigation.tsx","components/RootPage/RootPage.tsx","hooks/hooks.ts","store/reducers/ActionCreators.ts","components/Loader/Loader.tsx","components/PhotosPage/PhotosPage.tsx","components/TodosPage/TodosPage.tsx","components/Todo/Todo.tsx","components/PageNotFound/PageNotFound.tsx","App.tsx","store/reducers/PhotosSlice.ts","store/index.ts","index.tsx"],"names":["SortBy","MainNavigation","Navbar","bg","variant","Container","Brand","href","Nav","className","Link","as","to","RootPage","useAppDispatch","useDispatch","useAppSelector","useSelector","fetchPhotos","createAsyncThunk","photosId","thunkAPI","a","url","axios","get","response","data","rejectWithValue","Loader","PhotosPage","useState","selectedValue","setSelectedValue","state","photos","arePhotosLoading","errorLoadingPhotos","dispatch","fetchingAlbumId","length","albumId","htmlFor","value","toString","type","step","min","max","onChange","e","Number","target","onClick","disabled","map","photo","alt","title","src","thumbnailUrl","id","initialState","todos","description","status","filteredStatus","all","todosSlice","createSlice","name","reducers","toggleStatusTodo","action","toogledTodo","find","todo","payload","filter","push","addTodo","removeTodo","setStatusFilter","TodosPage","newTodoValue","setNewTodoValue","actions","visibleTodos","sort","b","String","event","done","onSubmit","preventDefault","newTodoId","Math","method","checked","cn","Todo","params","useParams","goalTodo","todoid","PageNotFound","App","path","element","photosSlice","extraReducers","rejected","pending","fulfilled","rootReducer","combineReducers","todosReducer","photosReducer","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c42a4b37.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\n\n// eslint-disable-next-line no-shadow\nexport enum SortBy {\n  all = 'all',\n  done = 'true',\n  todo = 'false'\n}\n\nexport interface TodosState {\n  todos: Todo[];\n  filteredStatus: SortBy;\n}\n\nconst initialState: TodosState = {\n  todos: [{\n    id: 1,\n    description: 'Lorem Ipsum',\n    status: false,\n  }],\n  filteredStatus: SortBy.all,\n};\n\nexport const todosSlice: Slice<TodosState> = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    toggleStatusTodo(state, action: PayloadAction<number>) {\n      const toogledTodo = state.todos.find(todo => todo.id === action.payload);\n\n      if (toogledTodo) {\n        toogledTodo.status = !toogledTodo.status;\n      }\n\n      state.todos = state.todos.filter(todo => todo.id !== action.payload);\n      if (toogledTodo) {\n        state.todos.push(toogledTodo);\n      }\n    },\n    addTodo(state, action: PayloadAction<Todo>) {\n      state.todos.push(action.payload);\n    },\n    removeTodo(state, action: PayloadAction<number>) {\n      state.todos = state.todos.filter(todo => todo.id !== action.payload);\n    },\n    setStatusFilter(state, action: PayloadAction<SortBy>) {\n      state.filteredStatus = action.payload;\n    },\n  },\n});\n\nexport default todosSlice.reducer;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport { Link } from 'react-router-dom';\nimport './MainNavigation.scss';\n\nexport const MainNavigation: React.FC = () => {\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand\n          href=\"/\"\n        >\n          Home\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          <Nav.Link as={Link} to=\"/photos\">\n            Photos\n          </Nav.Link>\n\n          <Nav.Link as={Link} to=\"/todos\">\n            Todos\n          </Nav.Link>\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n};\n","import React from 'react';\nimport './RootPage.scss';\n\nexport const RootPage: React.FC = () => {\n  return (\n    <div className=\"root\">\n      <h1>Home Page of Photos and Todos</h1>\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchPhotos = createAsyncThunk(\n  'photos/fetch',\n  async (photosId: number, thunkAPI) => {\n    try {\n      const url = `https://jsonplaceholder.typicode.com/photos?albumId=${photosId}`;\n\n      const response = await axios.get<Photo[]>(url);\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(`Some problem with fetching photos with ${error}`);\n    }\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { fetchPhotos } from '../../store/reducers/ActionCreators';\nimport { Loader } from '../Loader';\nimport './PhotosPage.scss';\n\nexport const PhotosPage: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState<number>(0);\n  const {\n    photos,\n    arePhotosLoading,\n    errorLoadingPhotos,\n  } = useAppSelector(state => state.photos);\n  const dispatch = useAppDispatch();\n\n  let fetchingAlbumId = 0;\n\n  if (photos.length > 0) {\n    fetchingAlbumId = photos[0].albumId;\n  }\n\n  if (arePhotosLoading) {\n    return <Loader />;\n  }\n\n  if (errorLoadingPhotos) {\n    return <h2>{errorLoadingPhotos}</h2>;\n  }\n\n  return (\n    <div className=\"photo\">\n      <div className=\"photo__top\">\n        <h2>Page with Photos</h2>\n        <label htmlFor=\"number-input\">\n          <span>\n            Choose id of album here\n          </span>\n          <input\n            value={selectedValue?.toString()}\n            type=\"number\"\n            step=\"1\"\n            min=\"1\"\n            max=\"100\"\n            onChange={(e) => setSelectedValue(Number(e.target.value))}\n          />\n        </label>\n        <button\n          type=\"button\"\n          onClick={() => dispatch(fetchPhotos(Number(selectedValue)))}\n          disabled={selectedValue === fetchingAlbumId}\n        >\n          Get photos\n        </button>\n      </div>\n      <div className=\"photo__container\">\n        {photos.map(photo => (\n          <div className=\"photo__card\" key={photo.id}>\n            <img alt={photo.title} src={photo.thumbnailUrl} />\n            <p>{photo.title}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { todosSlice, SortBy } from '../../store/reducers/TodosSlice';\nimport './TodosPage.scss';\n\nexport const TodosPage: React.FC = () => {\n  const [newTodoValue, setNewTodoValue] = useState('');\n  const { todos, filteredStatus } = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const {\n    toggleStatusTodo,\n    addTodo,\n    removeTodo,\n    setStatusFilter,\n  } = todosSlice.actions;\n\n  const onSubmitNewTodo = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newTodoId: number = Math.max(...todos.map(todo => todo.id)) + 1;\n\n    const newTodo: Todo = {\n      id: newTodoId,\n      description: newTodoValue,\n      status: false,\n    };\n\n    if (newTodoValue) {\n      dispatch(addTodo(newTodo));\n    }\n\n    setNewTodoValue('');\n  };\n\n  let visibleTodos = [...todos].sort((a, b) => Number(a.status) - Number(b.status));\n\n  if (filteredStatus !== 'all') {\n    visibleTodos = todos.filter(todo => String(todo.status) === filteredStatus);\n  }\n\n  return (\n    <div>\n      <h2>Page with Todos</h2>\n      <label htmlFor=\"select-completed\">\n        Toggle completion status&nbsp;\n        <select\n          className=\"TodoList__interactive-input\"\n          id=\"select-completed\"\n          value={filteredStatus}\n          onChange={(event) => dispatch(setStatusFilter(event.target.value))}\n        >\n          <option value={SortBy.all}>All</option>\n          <option value={SortBy.done}>Done</option>\n          <option value={SortBy.todo}>Todo</option>\n        </select>\n      </label>\n      <form\n        onSubmit={onSubmitNewTodo}\n        method=\"post\"\n      >\n        <input\n          value={newTodoValue}\n          onChange={(e) => setNewTodoValue(e.target.value)}\n        />\n        <button\n          type=\"submit\"\n        >\n          Add todo\n        </button>\n      </form>\n      <ul>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            <label htmlFor=\"checkbox\">\n              <input\n                id=\"checkbox\"\n                checked={todo.status}\n                type=\"checkbox\"\n                onChange={() => dispatch(toggleStatusTodo(todo.id))}\n              />\n              <Link\n                className={cn({ 'Todo--checked': todo.status })}\n                to={`/todos/${todo.id}`}\n              >\n                {`${todo.description} ${todo.id}`}\n              </Link>\n            </label>\n            <button\n              onClick={() => dispatch(removeTodo(todo.id))}\n              type=\"button\"\n            >\n              Remove\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAppSelector } from '../../hooks/hooks';\nimport './Todo.scss';\n\nexport const Todo: React.FC = () => {\n  const params = useParams();\n  const { todos } = useAppSelector(state => state.todos);\n  const goalTodo = todos.find(todo => todo.id === Number(params.todoid));\n\n  return (\n    <div className=\"single-todo\">\n      <h2>Single Todo Page</h2>\n      {`with id #${params.todoid}`}\n      <br />\n      <strong>Description of todo: </strong>\n      {goalTodo?.description}\n    </div>\n  );\n};\n","import React from 'react';\nimport './PageNotFound.scss';\n\nexport const PageNotFound: React.FC = () => {\n  return (\n    <div>\n      Page Not Found\n    </div>\n  );\n};\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { MainNavigation } from './components/MainNavigation';\nimport { RootPage } from './components/RootPage';\nimport { PhotosPage } from './components/PhotosPage';\nimport { TodosPage } from './components/TodosPage';\nimport { Todo } from './components/Todo';\nimport { PageNotFound } from './components/PageNotFound';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <MainNavigation />\n\n      <section className=\"main\">\n        <Routes>\n          <Route path=\"/\" element={<RootPage />} />\n          <Route path=\"photos\" element={<PhotosPage />} />\n          <Route path=\"todos\" element={<TodosPage />} />\n          <Route path=\"todos/:todoid\" element={<Todo />} />\n          <Route path=\"*\" element={<PageNotFound />} />\n        </Routes>\n      </section>\n    </>\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\nimport { fetchPhotos } from './ActionCreators';\n\nexport interface PhotosState {\n  photos: Photo[];\n  arePhotosLoading: boolean;\n  errorLoadingPhotos: string;\n}\n\nconst initialState: PhotosState = {\n  photos: [],\n  arePhotosLoading: false,\n  errorLoadingPhotos: '',\n};\n\nexport const photosSlice: Slice<PhotosState> = createSlice({\n  name: 'photos',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchPhotos.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.arePhotosLoading = false;\n      state.errorLoadingPhotos = action.payload;\n    },\n    [fetchPhotos.pending.type]: (state) => {\n      state.arePhotosLoading = true;\n    },\n    [fetchPhotos.fulfilled.type]: (state, action: PayloadAction<Photo[]>) => {\n      state.arePhotosLoading = false;\n      state.errorLoadingPhotos = '';\n      state.photos = action.payload;\n    },\n  },\n});\n\nexport default photosSlice.reducer;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport todosReducer from './reducers/TodosSlice';\nimport photosReducer from './reducers/PhotosSlice';\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  photos: photosReducer,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['todos'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst setupStore = () => {\n  return configureStore({\n    reducer: persistedReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n  });\n};\n\nexport const store = setupStore();\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore['dispatch'];\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { App } from './App';\nimport { store, persistor } from './store';\nimport { Loader } from './components/Loader';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loader />} persistor={persistor}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}